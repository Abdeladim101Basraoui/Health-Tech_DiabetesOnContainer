// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnetWebAPI.Model;

#nullable disable

namespace dotnetWebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("dotnetWebAPI.Model.FicheMedical", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("analyses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("patientC_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("patientC_ID");

                    b.ToTable("ficheMedicals");
                });

            modelBuilder.Entity("dotnetWebAPI.Model.FichePatient", b =>
                {
                    b.Property<int>("C_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("C_ID"), 1L, 1);

                    b.Property<string>("C_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C_lastName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("C_ID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("dotnetWebAPI.Model.FicheMedical", b =>
                {
                    b.HasOne("dotnetWebAPI.Model.FichePatient", "patient")
                        .WithMany()
                        .HasForeignKey("patientC_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });
#pragma warning restore 612, 618
        }
    }
}
